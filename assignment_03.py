# -*- coding: utf-8 -*-
"""Assignment 03

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4Y46JycKpDF45kf0W6bcefceZft-9a5
"""

from google.colab import files
from PIL import Image
from IPython.display import display

# Step 1: Upload
uploaded = files.upload()

# Step 2: Show each uploaded image
for file_name in uploaded.keys():
    img = Image.open(file_name)
    display(img)

from google.colab import files
from PIL import Image
from IPython.display import display

# Step 1: Upload
uploaded = files.upload()

# Step 2: Show each uploaded image
for file_name in uploaded.keys():
    img = Image.open(file_name)
    display(img)

from google.colab import files
from PIL import Image
from IPython.display import display

# Step 1: Upload
uploaded = files.upload()

# Step 2: Show each uploaded image
for file_name in uploaded.keys():
    img = Image.open(file_name)
    display(img)

from google.colab import files
from PIL import Image
from IPython.display import display

# Step 1: Upload
uploaded = files.upload()

# Step 2: Show each uploaded image
for file_name in uploaded.keys():
    img = Image.open(file_name)
    display(img)

from google.colab import files
from PIL import Image
from IPython.display import display

# Step 1: Upload
uploaded = files.upload()

# Step 2: Show each uploaded image
for file_name in uploaded.keys():
    img = Image.open(file_name)
    display(img)

#1. Write a Python function that takes a list of numbers as input and returns the sum of all even numbers in the list.
def sum_of_evens(numbers):
    return sum(num for num in numbers if num % 2 == 0)

print(sum_of_evens([1, 2, 3, 4, 5, 6]))

# 2. Create a Python function that accepts a string and returns the reverse of that string.
def reverse_string(s):
    return s[::-1]

print(reverse_string("hello"))  # Output: "olleh"

#3. Implement a Python function that takes a list of integers and returns a new list containing the squares of each number

def square_list(numbers):
    return [num ** 2 for num in numbers]
print(square_list([1, 2, 3, 4]))  # Output: [1, 4, 9, 16]

#4. Write a Python function that checks if a given number is prime or not from 1 to 200.

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

for num in range(1, 201):
    if is_prime(num):
        print(num, end=" ")

#5. Create an iterator class in Python that generates the Fibonacci sequence up to a specified number of terms.

class FibonacciIterator:
    def __init__(self, max_terms):
        self.max_terms = max_terms
        self.a, self.b = 0, 1
        self.count = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.count >= self.max_terms:
            raise StopIteration
        result = self.a
        self.a, self.b = self.b, self.a + self.b
        self.count += 1
        return result

for num in FibonacciIterator(10):
  print(num, end=" ")

#6. Write a generator function in Python that yields the powers of 2 up to a given exponent.

def powers_of_two(max_exponent):
    for i in range(max_exponent + 1):
        yield 2 ** i

# Example
for val in powers_of_two(5):
    print(val)

#7. Implement a generator function that reads a file line by line and yields each line as a string.
def read_file_lines(filename):
    try:
        with open(filename, "r", encoding="utf-8") as file:
            for line in file:
                yield line.strip()
    except FileNotFoundError:
        print("File not found:", filename)

#8. Use a lambda function in Python to sort a list of tuples based on the second element of each tuple.

data = [(1, 3), (2, 1), (4, 2)]
sorted_data = sorted(data, key=lambda x: x[1])
print(sorted_data)

#9. Write a Python program that uses map() to convert a list of temperatures from Celsius to Fahrenheit.

celsius = [0, 20, 30, 40]
fahrenheit = list(map(lambda c: (c * 9/5) + 32, celsius))
print(fahrenheit)  # Output: [32.0, 68.0, 86.0, 104.0]

#10. Create a Python program that uses filter() to remove all the vowels from a given string.

def remove_vowels(s):
    vowels = 'aeiouAEIOU'
    return ''.join(filter(lambda ch: ch not in vowels, s))

# Example
print(remove_vowels("Hello World"))

#11) Imagine an accounting routine used in a book shop. It works on a list with sublists, which look like this:
orders = [
    [34587, "Learning Python, Mark Lutz", 4, 40.95],
    [98762, "Programming Python, Mark Lutz", 5, 56.80],
    [77226, "Head First Python, Paul Barry", 3, 32.95],
    [88112, "Einführung in Python3, Bernd Klein", 3, 24.99]
]

result = list(map(
    lambda order: (
        order[0],
        order[2]*order[3] if order[2]*order[3] >= 100 else order[2]*order[3] + 10
    ),
    orders
))

print(result)
# Output: [(34587, 163.8), (98762, 284.0), (77226, 108.85), (88112, 84.97)]